pipeline MobilenGeraetenDataPipeline {

// Define the pipeline execution sequence
    
    DataDownloader
        -> ArchiveExtractor
        -> CSVFilePicker
        -> TextFileInterpreter
        -> CSVParser
        -> ExtraColumnRemover
        -> ColumnTranslator
        -> TableSchemaInterpreter
        -> TemperatureTransformer
        -> BatteryTemperatureTransformer
        -> SQLiteSaver;

    //  Download the dataset
    block DataDownloader oftype HttpExtractor {
        url: "https://www.mowesta.com/data/measure/mowesta-dataset-20221107.zip";
    }

    // Extract the ZIP archive
    block ArchiveExtractor oftype ArchiveInterpreter {
        archiveType: "zip";
    }

    // Select the CSV file from the extracted data
    block CSVFilePicker oftype FilePicker {
        path: "/data.csv";
    }

    // Parse the CSV file
    block TextFileInterpreter oftype TextFileInterpreter {}

    block CSVParser oftype CSVInterpreter {
        delimiter: ";";
    }

    // Remove unnecessary columns
    block ExtraColumnRemover oftype ColumnDeleter {
        delete: [column F, column G, column H, column I, column K, column L, column M, column N, column *];
    }

    // Rename columns
    block ColumnTranslator oftype CellWriter {
        at: range A1:F1;
        write: ["id", "producer", "model", "month", "temperature", "battery_temperature"];
    }

    // Interpret table schema
    block TableSchemaInterpreter oftype TableInterpreter {
        header: true;
        columns: [
            "id" oftype PositiveInteger,
            "producer" oftype text,
            "model" oftype text,
            "month" oftype integer,
            "temperature" oftype decimal,
            "battery_temperature" oftype decimal
        ];
    }

    // Value type for positive integers
    valuetype PositiveInteger oftype integer {
        constraints: [PositiveIDConstraint];
    }

    constraint PositiveIDConstraint on integer:
        value > 0;

    // Transform temperatures from Celsius to Fahrenheit
    block TemperatureTransformer oftype TableTransformer {
        inputColumns: ["temperature"];
        outputColumn: "temperature";
        use: CelsiusToFahrenheit;
    }

    block BatteryTemperatureTransformer oftype TableTransformer {
        inputColumns: ["battery_temperature"];
        outputColumn: "battery_temperature";
        use: CelsiusToFahrenheit;
    }

    // Transformation logic
    transform CelsiusToFahrenheit {
        from Celsius oftype decimal;
        to Fahrenheit oftype decimal;
        Fahrenheit: (Celsius * 9/5) + 32;
    }

    // Save data to SQLite database
    block SQLiteSaver oftype SQLiteLoader {
        table: "temperatures";
        file: "./temperatures.sqlite";
    }

    
}
